class FormLoader {
    constructor() {
        this.init();
    }
    
    async init() {
        try {
            await this.loadForm();
            this.initializeFormHandlers();
        } catch (error) {
            this.showFormError();
        }
    }
    
    async loadForm() {
        const response = await fetch('static/form/form_cta.html');
        if (!response.ok) {
            throw new Error('–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        const formHTML = await response.text();
        document.getElementById('form-container').innerHTML = formHTML;
    }
    
    initializeFormHandlers() {
        const contactForm = document.getElementById('contactForm');
        const formMessage = document.getElementById('formMessage');
        
        if (contactForm) {
            contactForm.addEventListener('submit', this.handleFormSubmit.bind(this));
        }
    }
    
    async handleFormSubmit(e) {
        e.preventDefault();
        
        const form = e.target;
        const submitButton = form.querySelector('.submit-button');
        const buttonText = form.querySelector('.button-text');
        const buttonLoading = form.querySelector('.button-loading');
        const formMessage = document.getElementById('formMessage');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        this.setLoadingState(submitButton, buttonText, buttonLoading, true);
        
        try {
            const formData = new FormData(form);
            await this.submitForm(formData);
            this.showSuccessMessage(formMessage, '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            form.reset();
        } catch (error) {
            this.showErrorMessage(formMessage, '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            this.setLoadingState(submitButton, buttonText, buttonLoading, false);
        }
    }
    
    setLoadingState(button, text, loading, isLoading) {
        if (isLoading) {
            text.style.display = 'none';
            loading.style.display = 'inline';
            button.disabled = true;
        } else {
            text.style.display = 'inline';
            loading.style.display = 'none';
            button.disabled = false;
        }
    }
    
async submitForm(formData) {
    const data = Object.fromEntries(formData);
    const config = window.TELEGRAM_CONFIG || {};
    console.log(config.BOT_TOKEN);
    // === –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –î–í–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
    const BOT_TOKEN = window.TELEGRAM_BOT_TOKEN; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
    const CHAT_ID = window.TELEGRAM_CHAT_ID; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
    // ====================================
    
    const message = `
üéØ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –° –°–ê–ô–¢–ê

üë§ –ò–º—è: ${data.name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
üìß Email: ${data.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${window.location.href}
    `.trim();
    
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    
    const response = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            chat_id: CHAT_ID,
            text: message,
            parse_mode: 'HTML'
        })
    });
    
    const result = await response.json();
    
    if (!response.ok || !result.ok) {
        console.error('Telegram error:', result);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É');
    }
    
    return result;
}
    
    showSuccessMessage(messageElement, text) {
        messageElement.textContent = text;
        messageElement.className = 'form-message success';
        messageElement.style.display = 'block';
        this.hideMessageAfterTimeout(messageElement);
    }
    
    showErrorMessage(messageElement, text) {
        messageElement.textContent = text;
        messageElement.className = 'form-message error';
        messageElement.style.display = 'block';
        this.hideMessageAfterTimeout(messageElement);
    }
    
    hideMessageAfterTimeout(messageElement) {
        setTimeout(() => {
            messageElement.style.display = 'none';
        }, 5000);
    }
    
    showFormError() {
        document.getElementById('form-container').innerHTML = `
            <div class="form-error">
                <p>–§–æ—Ä–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.</p>
            </div>
        `;
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    new FormLoader();
});